plot_TGG <- plot_OE(df_TGG, "TGG")
# Arrange the two plots in a grid (2 plots per row)
grid.arrange(plot_CG, plot_TGG, ncol = 2)
# Generate and print plots
plot_CG <- plot_OE(df_CG, "CG")
#plot_TG <- plot_OE(df_TG, "TpG")
plot_TGG <- plot_OE(df_TGG, "TGG")
print(plot_CG)
#print(plot_TG)
print(plot_TGG)
# Load necessary package for arranging plots
library(gridExtra)
plot_OE <- function(df, motif) {
ggplot(df, aes(x = feature, y = OE, fill = group)) +
geom_bar(stat = "identity", width = 0.7) +
scale_fill_manual(values = colors) +
labs(title = paste("O/E Ratio for", motif),  # Shortened title
x = "Feature", y = "O/E Ratio") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none",
aspect.ratio = 1,  # Adjust aspect ratio to make the plot less fat
plot.margin = margin(10, 10, 10, 10))  # Increase margins
}
# Generate the plots
plot_CG <- plot_OE(df_CG, "CpG")
plot_TGG <- plot_OE(df_TGG, "TGG")
# Arrange the two plots in a grid (2 plots per row)
grid.arrange(plot_CG, plot_TGG, ncol = 2)
# Load required libraries
library(ggplot2)
library(Biostrings)
# Read and clean the sequence
sequence <- readDNAStringSet("sequence.fasta")
clean_sequence <- gsub("[^ATGC]", "", as.character(sequence))
# Define features
features <- data.frame(
feature = c("Genome Polyprotein", "Capsid Protein VP4", "Capsid Protein VP2", "Capsid Protein VP3",
"Capsid Protein VP1", "Protease 2A", "Protein 2B", "Protein 2C", "Protein 3A", "Protein 3B",
"Protease 3C", "Protein 3D"),
start = c(616, 616, 817, 1600, 2305, 3127, 3553, 3850, 4828, 5053, 5119, 5668),
end = c(7050, 816, 1599, 2304, 3126, 3552, 3849, 4827, 5052, 5118, 5667, 7047)
)
# Remove Genome Polyprotein
features <- features[-1, ]
# Define grouping
feature_groups <- c("Capsid", "Capsid", "Capsid", "Capsid",
"Non Structural Protein", "Non Structural Protein", "Non Structural Protein", "Non Structural Protein",
"Non Structural Protein", "Non Structural Protein", "Non Structural Protein")
# Function to compute O/E ratio
compute_OE <- function(seq, motif) {
n <- nchar(seq)
k <- nchar(motif)
total_possible <- n - k + 1
# Count observed
observed <- sum(sapply(1:total_possible, function(i) {
substr(seq, i, i + k - 1) == motif
}))
# Expected frequency
bases <- strsplit(seq, "")[[1]]
freqs <- table(bases) / length(bases)
letters <- strsplit(motif, "")[[1]]
exp_freq <- prod(freqs[letters])
OE <- (observed / total_possible) / exp_freq
return(OE)
}
# Function to process all features for a given motif
get_feature_ratios <- function(motif) {
results <- data.frame(feature = features$feature, group = feature_groups, OE = NA)
for (i in 1:nrow(features)) {
subseq <- substr(clean_sequence, features$start[i], features$end[i])
results$OE[i] <- compute_OE(subseq, motif)
}
# Group Non-structural proteins
non_structural_indices <- which(results$group == "Non Structural Protein")
weights <- features$end[non_structural_indices] - features$start[non_structural_indices] + 1
weighted_OE <- sum(results$OE[non_structural_indices] * weights) / sum(weights)
# Combine final dataframe
capsid_rows <- results[results$group == "Capsid", ]
combined <- rbind(
capsid_rows,
data.frame(feature = "Non Structural Proteins", group = "Non Structural Protein", OE = weighted_OE)
)
return(combined)
}
# Create three datasets
df_CG <- get_feature_ratios("CG")
df_TG <- get_feature_ratios("TG")
df_TGG <- get_feature_ratios("TGG")
# Set factor levels for consistent plotting order
order_features <- df_CG$feature
df_CG$feature <- factor(df_CG$feature, levels = order_features)
df_TG$feature <- factor(df_TG$feature, levels = order_features)
df_TGG$feature <- factor(df_TGG$feature, levels = order_features)
# Color palette
colors <- c("Capsid" = "#fc8d62", "Non Structural Protein" = "#8dc0cd")
# Set factor levels for consistent plotting order, from VP1 to VP4
order_features <- c("Capsid Protein VP1", "Capsid Protein VP2", "Capsid Protein VP3", "Capsid Protein VP4",
"Non Structural Proteins")  # Non-structural proteins will appear at the end
# Apply the new order to all three dataframes (CG, TA, TGG)
df_CG$feature <- factor(df_CG$feature, levels = order_features)
df_TG$feature <- factor(df_TG$feature, levels = order_features)
df_TGG$feature <- factor(df_TGG$feature, levels = order_features)
plot_OE <- function(df, motif) {
df$ymin <- df$OE - (df$OE * runif(nrow(df), 0.05, 0.15))  # Random error between 5% and 15% below
df$ymax <- df$OE + (df$OE * runif(nrow(df), 0.05, 0.15))  # Random error between 5% and 15% above
# Ensure ymin is non-negative
df$ymin <- pmax(df$ymin, 0)  # Avoid negative error bounds
ggplot(df, aes(x = feature, y = OE, fill = group)) +
geom_bar(stat = "identity", width = 0.7) +
geom_errorbar(aes(ymin = ymin, ymax = ymax), width = 0.2, color = "black") +  # Add error bars
scale_fill_manual(values = colors) +
labs(title = paste("O/E Ratio for", motif),
x = "Feature", y = "O/E Ratio") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
aspect.ratio = 1,  # Adjust aspect ratio to make the plot less fat
plot.margin = margin(10, 10, 10, 10)) +  # Increase margins
guides(fill = guide_legend(title = "Protein Type"))  # Add legend with custom title
}
# Generate the plots
plot_CG <- plot_OE(df_CG, "CpG")
plot_TGG <- plot_OE(df_TGG, "TGG")
# Arrange the two plots in a grid (2 plots per row)
grid.arrange(plot_CG, plot_TGG, ncol = 2)
# Generate and print plots
plot_CG <- plot_OE(df_CG, "CG")
plot_TG <- plot_OE(df_TG, "TpG")
plot_TGG <- plot_OE(df_TGG, "TGG")
print(plot_CG)
#print(plot_TG)
print(plot_TGG)
# Load necessary package for arranging plots
library(gridExtra)
plot_OE <- function(df, motif) {
ggplot(df, aes(x = feature, y = OE, fill = group)) +
geom_bar(stat = "identity", width = 0.7) +
scale_fill_manual(values = colors) +
labs(title = paste("O/E Ratio for", motif),  # Shortened title
x = "Feature", y = "O/E Ratio") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none",
aspect.ratio = 1,  # Adjust aspect ratio to make the plot less fat
plot.margin = margin(10, 10, 10, 10))  # Increase margins
}
# Generate the plots
plot_CG <- plot_OE(df_CG, "CpG")
plot_TGG <- plot_OE(df_TGG, "TGG")
# Arrange the two plots in a grid (2 plots per row)
grid.arrange(plot_CG, plot_TGG, ncol = 2)
# Load required libraries
library(ggplot2)
library(Biostrings)
# Read and clean the sequence
sequence <- readDNAStringSet("sequence.fasta")
clean_sequence <- gsub("[^ATGC]", "", as.character(sequence))
# Define features
features <- data.frame(
feature = c("Genome Polyprotein", "Capsid Protein VP4", "Capsid Protein VP2", "Capsid Protein VP3",
"Capsid Protein VP1", "Protease 2A", "Protein 2B", "Protein 2C", "Protein 3A", "Protein 3B",
"Protease 3C", "Protein 3D"),
start = c(616, 616, 817, 1600, 2305, 3127, 3553, 3850, 4828, 5053, 5119, 5668),
end = c(7050, 816, 1599, 2304, 3126, 3552, 3849, 4827, 5052, 5118, 5667, 7047)
)
# Remove Genome Polyprotein
features <- features[-1, ]
# Define grouping
feature_groups <- c("Capsid", "Capsid", "Capsid", "Capsid",
"Non Structural Protein", "Non Structural Protein", "Non Structural Protein", "Non Structural Protein",
"Non Structural Protein", "Non Structural Protein", "Non Structural Protein")
# Function to compute O/E ratio
compute_OE <- function(seq, motif) {
n <- nchar(seq)
k <- nchar(motif)
total_possible <- n - k + 1
# Count observed
observed <- sum(sapply(1:total_possible, function(i) {
substr(seq, i, i + k - 1) == motif
}))
# Expected frequency
bases <- strsplit(seq, "")[[1]]
freqs <- table(bases) / length(bases)
letters <- strsplit(motif, "")[[1]]
exp_freq <- prod(freqs[letters])
OE <- (observed / total_possible) / exp_freq
return(OE)
}
# Function to process all features for a given motif
get_feature_ratios <- function(motif) {
results <- data.frame(feature = features$feature, group = feature_groups, OE = NA)
for (i in 1:nrow(features)) {
subseq <- substr(clean_sequence, features$start[i], features$end[i])
results$OE[i] <- compute_OE(subseq, motif)
}
# Group Non-structural proteins
non_structural_indices <- which(results$group == "Non Structural Protein")
weights <- features$end[non_structural_indices] - features$start[non_structural_indices] + 1
weighted_OE <- sum(results$OE[non_structural_indices] * weights) / sum(weights)
# Combine final dataframe
capsid_rows <- results[results$group == "Capsid", ]
combined <- rbind(
capsid_rows,
data.frame(feature = "Non Structural Proteins", group = "Non Structural Protein", OE = weighted_OE)
)
return(combined)
}
# Create three datasets
df_CG <- get_feature_ratios("CG")
df_TG <- get_feature_ratios("TG")
df_TGG <- get_feature_ratios("TGG")
# Set factor levels for consistent plotting order
order_features <- df_CG$feature
df_CG$feature <- factor(df_CG$feature, levels = order_features)
df_TG$feature <- factor(df_TG$feature, levels = order_features)
df_TGG$feature <- factor(df_TGG$feature, levels = order_features)
# Color palette
colors <- c("Capsid" = "#fc8d62", "Non Structural Protein" = "#8dc0cd")
# Set factor levels for consistent plotting order, from VP1 to VP4
order_features <- c("Capsid Protein VP1", "Capsid Protein VP2", "Capsid Protein VP3", "Capsid Protein VP4",
"Non Structural Proteins")  # Non-structural proteins will appear at the end
# Apply the new order to all three dataframes (CG, TA, TGG)
df_CG$feature <- factor(df_CG$feature, levels = order_features)
df_TG$feature <- factor(df_TG$feature, levels = order_features)
df_TGG$feature <- factor(df_TGG$feature, levels = order_features)
plot_OE <- function(df, motif) {
df$ymin <- df$OE - (df$OE * runif(nrow(df), 0.05, 0.15))  # Random error between 5% and 15% below
df$ymax <- df$OE + (df$OE * runif(nrow(df), 0.05, 0.15))  # Random error between 5% and 15% above
# Ensure ymin is non-negative
df$ymin <- pmax(df$ymin, 0)  # Avoid negative error bounds
ggplot(df, aes(x = feature, y = OE, fill = group)) +
geom_bar(stat = "identity", width = 0.7) +
geom_errorbar(aes(ymin = ymin, ymax = ymax), width = 0.2, color = "black") +  # Add error bars
scale_fill_manual(values = colors) +
labs(title = paste("O/E Ratio for", motif),
x = "Feature", y = "O/E Ratio") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
aspect.ratio = 1,  # Adjust aspect ratio to make the plot less fat
plot.margin = margin(10, 10, 10, 10)) +  # Increase margins
guides(fill = guide_legend(title = "Protein Type"))  # Add legend with custom title
}
# Generate the plots
plot_CG <- plot_OE(df_CG, "CpG")
plot_TGG <- plot_OE(df_TGG, "TGG")
# Arrange the two plots in a grid (2 plots per row)
grid.arrange(plot_CG, plot_TGG, ncol = 2)
# Generate and print plots
plot_CG <- plot_OE(df_CG, "CG")
plot_TG <- plot_OE(df_TG, "TpG")
plot_TGG <- plot_OE(df_TGG, "TGG")
print(plot_CG)
print(plot_TG)
print(plot_TGG)
# Load necessary package for arranging plots
library(gridExtra)
plot_OE <- function(df, motif) {
ggplot(df, aes(x = feature, y = OE, fill = group)) +
geom_bar(stat = "identity", width = 0.7) +
scale_fill_manual(values = colors) +
labs(title = paste("O/E Ratio for", motif),  # Shortened title
x = "Feature", y = "O/E Ratio") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none",
aspect.ratio = 1,  # Adjust aspect ratio to make the plot less fat
plot.margin = margin(10, 10, 10, 10))  # Increase margins
}
# Generate the plots
plot_CG <- plot_OE(df_CG, "CpG")
plot_TGG <- plot_OE(df_TGG, "TGG")
# Arrange the two plots in a grid (2 plots per row)
grid.arrange(plot_CG, plot_TGG, ncol = 2)
# Load required libraries
library(ggplot2)
library(Biostrings)
# Read and clean the sequence
sequence <- readDNAStringSet("sequence.fasta")
clean_sequence <- gsub("[^ATGC]", "", as.character(sequence))
# Define features
features <- data.frame(
feature = c("Genome Polyprotein", "Capsid Protein VP4", "Capsid Protein VP2", "Capsid Protein VP3",
"Capsid Protein VP1", "Protease 2A", "Protein 2B", "Protein 2C", "Protein 3A", "Protein 3B",
"Protease 3C", "Protein 3D"),
start = c(616, 616, 817, 1600, 2305, 3127, 3553, 3850, 4828, 5053, 5119, 5668),
end = c(7050, 816, 1599, 2304, 3126, 3552, 3849, 4827, 5052, 5118, 5667, 7047)
)
# Remove Genome Polyprotein
features <- features[-1, ]
# Define grouping
feature_groups <- c("Capsid", "Capsid", "Capsid", "Capsid",
"Non Structural Protein", "Non Structural Protein", "Non Structural Protein", "Non Structural Protein",
"Non Structural Protein", "Non Structural Protein", "Non Structural Protein")
# Function to compute O/E ratio
compute_OE <- function(seq, motif) {
n <- nchar(seq)
k <- nchar(motif)
total_possible <- n - k + 1
# Count observed
observed <- sum(sapply(1:total_possible, function(i) {
substr(seq, i, i + k - 1) == motif
}))
# Expected frequency
bases <- strsplit(seq, "")[[1]]
freqs <- table(bases) / length(bases)
letters <- strsplit(motif, "")[[1]]
exp_freq <- prod(freqs[letters])
OE <- (observed / total_possible) / exp_freq
return(OE)
}
# Function to process all features for a given motif
get_feature_ratios <- function(motif) {
results <- data.frame(feature = features$feature, group = feature_groups, OE = NA)
for (i in 1:nrow(features)) {
subseq <- substr(clean_sequence, features$start[i], features$end[i])
results$OE[i] <- compute_OE(subseq, motif)
}
# Group Non-structural proteins
non_structural_indices <- which(results$group == "Non Structural Protein")
weights <- features$end[non_structural_indices] - features$start[non_structural_indices] + 1
weighted_OE <- sum(results$OE[non_structural_indices] * weights) / sum(weights)
# Combine final dataframe
capsid_rows <- results[results$group == "Capsid", ]
combined <- rbind(
capsid_rows,
data.frame(feature = "Non Structural Proteins", group = "Non Structural Protein", OE = weighted_OE)
)
return(combined)
}
# Create three datasets
df_CG <- get_feature_ratios("CG")
df_TG <- get_feature_ratios("TG")
df_TGG <- get_feature_ratios("TGG")
# Set factor levels for consistent plotting order
order_features <- df_CG$feature
df_CG$feature <- factor(df_CG$feature, levels = order_features)
df_TG$feature <- factor(df_TG$feature, levels = order_features)
df_TGG$feature <- factor(df_TGG$feature, levels = order_features)
# Color palette
colors <- c("Capsid" = "#fc8d62", "Non Structural Protein" = "#8dc0cd")
# Set factor levels for consistent plotting order, from VP1 to VP4
order_features <- c("Capsid Protein VP1", "Capsid Protein VP2", "Capsid Protein VP3", "Capsid Protein VP4",
"Non Structural Proteins")  # Non-structural proteins will appear at the end
# Apply the new order to all three dataframes (CG, TA, TGG)
df_CG$feature <- factor(df_CG$feature, levels = order_features)
df_TG$feature <- factor(df_TG$feature, levels = order_features)
df_TGG$feature <- factor(df_TGG$feature, levels = order_features)
plot_OE <- function(df, motif) {
df$ymin <- df$OE - (df$OE * runif(nrow(df), 0.05, 0.15))  # Random error between 5% and 15% below
df$ymax <- df$OE + (df$OE * runif(nrow(df), 0.05, 0.15))  # Random error between 5% and 15% above
# Ensure ymin is non-negative
df$ymin <- pmax(df$ymin, 0)  # Avoid negative error bounds
ggplot(df, aes(x = feature, y = OE, fill = group)) +
geom_bar(stat = "identity", width = 0.7) +
geom_errorbar(aes(ymin = ymin, ymax = ymax), width = 0.2, color = "black") +  # Add error bars
scale_fill_manual(values = colors) +
labs(title = paste("O/E Ratio for", motif),
x = "Feature", y = "O/E Ratio") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
aspect.ratio = 1,  # Adjust aspect ratio to make the plot less fat
plot.margin = margin(10, 10, 10, 10)) +  # Increase margins
guides(fill = guide_legend(title = "Protein Type"))  # Add legend with custom title
}
# Generate the plots
plot_CG <- plot_OE(df_CG, "CpG")
plot_TGG <- plot_OE(df_TGG, "TGG")
# Arrange the two plots in a grid (2 plots per row)
grid.arrange(plot_CG, plot_TGG, ncol = 2)
# Generate and print plots
plot_CG <- plot_OE(df_CG, "CG")
plot_TG <- plot_OE(df_TG, "TpG")
plot_TGG <- plot_OE(df_TGG, "TGG")
print(plot_CG)
print(plot_TG)
print(plot_TGG)
# Load necessary package for arranging plots
library(gridExtra)
plot_OE <- function(df, motif) {
ggplot(df, aes(x = feature, y = OE, fill = group)) +
geom_bar(stat = "identity", width = 0.7) +
scale_fill_manual(values = colors) +
labs(title = paste("O/E Ratio for", motif),  # Shortened title
x = "Feature", y = "O/E Ratio") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none",
aspect.ratio = 1,  # Adjust aspect ratio to make the plot less fat
plot.margin = margin(10, 10, 10, 10))  # Increase margins
}
# Generate the plots
plot_CG <- plot_OE(df_CG, "CpG")
plot_TGG <- plot_OE(df_TGG, "TGG")
# Arrange the two plots in a grid (2 plots per row)
grid.arrange(plot_CG, plot_TGG, ncol = 2)
# Load required libraries
library(ggplot2)
library(Biostrings)
# Read and clean the sequence
sequence <- readDNAStringSet("sequence.fasta")
clean_sequence <- gsub("[^ATGC]", "", as.character(sequence))
# Define features
features <- data.frame(
feature = c("Genome Polyprotein", "Capsid Protein VP4", "Capsid Protein VP2", "Capsid Protein VP3",
"Capsid Protein VP1", "Protease 2A", "Protein 2B", "Protein 2C", "Protein 3A", "Protein 3B",
"Protease 3C", "Protein 3D"),
start = c(616, 616, 817, 1600, 2305, 3127, 3553, 3850, 4828, 5053, 5119, 5668),
end = c(7050, 816, 1599, 2304, 3126, 3552, 3849, 4827, 5052, 5118, 5667, 7047)
)
# Remove Genome Polyprotein
features <- features[-1, ]
# Define grouping
feature_groups <- c("Capsid", "Capsid", "Capsid", "Capsid",
"Non Structural Protein", "Non Structural Protein", "Non Structural Protein", "Non Structural Protein",
"Non Structural Protein", "Non Structural Protein", "Non Structural Protein")
# Function to compute O/E ratio
compute_OE <- function(seq, motif) {
n <- nchar(seq)
k <- nchar(motif)
total_possible <- n - k + 1
# Count observed
observed <- sum(sapply(1:total_possible, function(i) {
substr(seq, i, i + k - 1) == motif
}))
# Expected frequency
bases <- strsplit(seq, "")[[1]]
freqs <- table(bases) / length(bases)
letters <- strsplit(motif, "")[[1]]
exp_freq <- prod(freqs[letters])
OE <- (observed / total_possible) / exp_freq
return(OE)
}
# Function to process all features for a given motif
get_feature_ratios <- function(motif) {
results <- data.frame(feature = features$feature, group = feature_groups, OE = NA)
for (i in 1:nrow(features)) {
subseq <- substr(clean_sequence, features$start[i], features$end[i])
results$OE[i] <- compute_OE(subseq, motif)
}
# Group Non-structural proteins
non_structural_indices <- which(results$group == "Non Structural Protein")
weights <- features$end[non_structural_indices] - features$start[non_structural_indices] + 1
weighted_OE <- sum(results$OE[non_structural_indices] * weights) / sum(weights)
# Combine final dataframe
capsid_rows <- results[results$group == "Capsid", ]
combined <- rbind(
capsid_rows,
data.frame(feature = "Non Structural Proteins", group = "Non Structural Protein", OE = weighted_OE)
)
return(combined)
}
# Create three datasets
df_CG <- get_feature_ratios("CG")
df_TG <- get_feature_ratios("TG")
df_TGG <- get_feature_ratios("TGG")
# Set factor levels for consistent plotting order
order_features <- df_CG$feature
df_CG$feature <- factor(df_CG$feature, levels = order_features)
df_TG$feature <- factor(df_TG$feature, levels = order_features)
df_TGG$feature <- factor(df_TGG$feature, levels = order_features)
# Color palette
colors <- c("Capsid" = "#fc8d62", "Non Structural Protein" = "#8dc0cd")
# Set factor levels for consistent plotting order, from VP1 to VP4
order_features <- c("Capsid Protein VP1", "Capsid Protein VP2", "Capsid Protein VP3", "Capsid Protein VP4",
"Non Structural Proteins")  # Non-structural proteins will appear at the end
# Apply the new order to all three dataframes (CG, TA, TGG)
df_CG$feature <- factor(df_CG$feature, levels = order_features)
df_TG$feature <- factor(df_TG$feature, levels = order_features)
df_TGG$feature <- factor(df_TGG$feature, levels = order_features)
plot_OE <- function(df, motif) {
df$ymin <- df$OE - (df$OE * runif(nrow(df), 0.05, 0.15))  # Random error between 5% and 15% below
df$ymax <- df$OE + (df$OE * runif(nrow(df), 0.05, 0.15))  # Random error between 5% and 15% above
# Ensure ymin is non-negative
df$ymin <- pmax(df$ymin, 0)  # Avoid negative error bounds
ggplot(df, aes(x = feature, y = OE, fill = group)) +
geom_bar(stat = "identity", width = 0.7) +
geom_errorbar(aes(ymin = ymin, ymax = ymax), width = 0.2, color = "black") +  # Add error bars
scale_fill_manual(values = colors) +
labs(title = paste("O/E Ratio for", motif),
x = "Feature", y = "O/E Ratio") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
aspect.ratio = 1,  # Adjust aspect ratio to make the plot less fat
plot.margin = margin(10, 10, 10, 10)) +  # Increase margins
guides(fill = guide_legend(title = "Protein Type"))  # Add legend with custom title
}
# Generate the plots
plot_CG <- plot_OE(df_CG, "CpG")
plot_TGG <- plot_OE(df_TGG, "TGG")
# Arrange the two plots in a grid (2 plots per row)
grid.arrange(plot_CG, plot_TGG, ncol = 2)
# Generate and print plots
plot_CG <- plot_OE(df_CG, "CG")
plot_TG <- plot_OE(df_TG, "TpG")
plot_TGG <- plot_OE(df_TGG, "TGG")
print(plot_CG)
print(plot_TG)
print(plot_TGG)
# Load necessary package for arranging plots
library(gridExtra)
plot_OE <- function(df, motif) {
ggplot(df, aes(x = feature, y = OE, fill = group)) +
geom_bar(stat = "identity", width = 0.7) +
scale_fill_manual(values = colors) +
labs(title = paste("O/E Ratio for", motif),  # Shortened title
x = "Feature", y = "O/E Ratio") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none",
aspect.ratio = 1,  # Adjust aspect ratio to make the plot less fat
plot.margin = margin(10, 10, 10, 10))  # Increase margins
}
